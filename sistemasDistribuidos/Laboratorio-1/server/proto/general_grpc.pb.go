// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: general.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PedidoService_GetPedidoStatus_FullMethodName = "/grupo11.PedidoService/GetPedidoStatus"
)

// PedidoServiceClient is the client API for PedidoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PedidoServiceClient interface {
	GetPedidoStatus(ctx context.Context, in *GenerarOrden, opts ...grpc.CallOption) (*RecibirNumeroSeguimiento, error)
}

type pedidoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPedidoServiceClient(cc grpc.ClientConnInterface) PedidoServiceClient {
	return &pedidoServiceClient{cc}
}

func (c *pedidoServiceClient) GetPedidoStatus(ctx context.Context, in *GenerarOrden, opts ...grpc.CallOption) (*RecibirNumeroSeguimiento, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecibirNumeroSeguimiento)
	err := c.cc.Invoke(ctx, PedidoService_GetPedidoStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PedidoServiceServer is the server API for PedidoService service.
// All implementations must embed UnimplementedPedidoServiceServer
// for forward compatibility.
type PedidoServiceServer interface {
	GetPedidoStatus(context.Context, *GenerarOrden) (*RecibirNumeroSeguimiento, error)
	mustEmbedUnimplementedPedidoServiceServer()
}

// UnimplementedPedidoServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPedidoServiceServer struct{}

func (UnimplementedPedidoServiceServer) GetPedidoStatus(context.Context, *GenerarOrden) (*RecibirNumeroSeguimiento, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPedidoStatus not implemented")
}
func (UnimplementedPedidoServiceServer) mustEmbedUnimplementedPedidoServiceServer() {}
func (UnimplementedPedidoServiceServer) testEmbeddedByValue()                       {}

// UnsafePedidoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PedidoServiceServer will
// result in compilation errors.
type UnsafePedidoServiceServer interface {
	mustEmbedUnimplementedPedidoServiceServer()
}

func RegisterPedidoServiceServer(s grpc.ServiceRegistrar, srv PedidoServiceServer) {
	// If the following call pancis, it indicates UnimplementedPedidoServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PedidoService_ServiceDesc, srv)
}

func _PedidoService_GetPedidoStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerarOrden)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidoServiceServer).GetPedidoStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PedidoService_GetPedidoStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidoServiceServer).GetPedidoStatus(ctx, req.(*GenerarOrden))
	}
	return interceptor(ctx, in, info, handler)
}

// PedidoService_ServiceDesc is the grpc.ServiceDesc for PedidoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PedidoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grupo11.PedidoService",
	HandlerType: (*PedidoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPedidoStatus",
			Handler:    _PedidoService_GetPedidoStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}

const (
	PedidoState_GetPedidoState_FullMethodName = "/grupo11.PedidoState/GetPedidoState"
)

// PedidoStateClient is the client API for PedidoState service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PedidoStateClient interface {
	GetPedidoState(ctx context.Context, in *SolicitarEstado, opts ...grpc.CallOption) (*EstadoPaquete, error)
}

type pedidoStateClient struct {
	cc grpc.ClientConnInterface
}

func NewPedidoStateClient(cc grpc.ClientConnInterface) PedidoStateClient {
	return &pedidoStateClient{cc}
}

func (c *pedidoStateClient) GetPedidoState(ctx context.Context, in *SolicitarEstado, opts ...grpc.CallOption) (*EstadoPaquete, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstadoPaquete)
	err := c.cc.Invoke(ctx, PedidoState_GetPedidoState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PedidoStateServer is the server API for PedidoState service.
// All implementations must embed UnimplementedPedidoStateServer
// for forward compatibility.
type PedidoStateServer interface {
	GetPedidoState(context.Context, *SolicitarEstado) (*EstadoPaquete, error)
	mustEmbedUnimplementedPedidoStateServer()
}

// UnimplementedPedidoStateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPedidoStateServer struct{}

func (UnimplementedPedidoStateServer) GetPedidoState(context.Context, *SolicitarEstado) (*EstadoPaquete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPedidoState not implemented")
}
func (UnimplementedPedidoStateServer) mustEmbedUnimplementedPedidoStateServer() {}
func (UnimplementedPedidoStateServer) testEmbeddedByValue()                     {}

// UnsafePedidoStateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PedidoStateServer will
// result in compilation errors.
type UnsafePedidoStateServer interface {
	mustEmbedUnimplementedPedidoStateServer()
}

func RegisterPedidoStateServer(s grpc.ServiceRegistrar, srv PedidoStateServer) {
	// If the following call pancis, it indicates UnimplementedPedidoStateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PedidoState_ServiceDesc, srv)
}

func _PedidoState_GetPedidoState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitarEstado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PedidoStateServer).GetPedidoState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PedidoState_GetPedidoState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PedidoStateServer).GetPedidoState(ctx, req.(*SolicitarEstado))
	}
	return interceptor(ctx, in, info, handler)
}

// PedidoState_ServiceDesc is the grpc.ServiceDesc for PedidoState service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PedidoState_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grupo11.PedidoState",
	HandlerType: (*PedidoStateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPedidoState",
			Handler:    _PedidoState_GetPedidoState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}

const (
	IngresoCaravana_GetIngresoCaravana_FullMethodName = "/grupo11.IngresoCaravana/GetIngresoCaravana"
)

// IngresoCaravanaClient is the client API for IngresoCaravana service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IngresoCaravanaClient interface {
	GetIngresoCaravana(ctx context.Context, in *IngresarACaravana, opts ...grpc.CallOption) (*RespuestaIngreso, error)
}

type ingresoCaravanaClient struct {
	cc grpc.ClientConnInterface
}

func NewIngresoCaravanaClient(cc grpc.ClientConnInterface) IngresoCaravanaClient {
	return &ingresoCaravanaClient{cc}
}

func (c *ingresoCaravanaClient) GetIngresoCaravana(ctx context.Context, in *IngresarACaravana, opts ...grpc.CallOption) (*RespuestaIngreso, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RespuestaIngreso)
	err := c.cc.Invoke(ctx, IngresoCaravana_GetIngresoCaravana_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IngresoCaravanaServer is the server API for IngresoCaravana service.
// All implementations must embed UnimplementedIngresoCaravanaServer
// for forward compatibility.
type IngresoCaravanaServer interface {
	GetIngresoCaravana(context.Context, *IngresarACaravana) (*RespuestaIngreso, error)
	mustEmbedUnimplementedIngresoCaravanaServer()
}

// UnimplementedIngresoCaravanaServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIngresoCaravanaServer struct{}

func (UnimplementedIngresoCaravanaServer) GetIngresoCaravana(context.Context, *IngresarACaravana) (*RespuestaIngreso, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIngresoCaravana not implemented")
}
func (UnimplementedIngresoCaravanaServer) mustEmbedUnimplementedIngresoCaravanaServer() {}
func (UnimplementedIngresoCaravanaServer) testEmbeddedByValue()                         {}

// UnsafeIngresoCaravanaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IngresoCaravanaServer will
// result in compilation errors.
type UnsafeIngresoCaravanaServer interface {
	mustEmbedUnimplementedIngresoCaravanaServer()
}

func RegisterIngresoCaravanaServer(s grpc.ServiceRegistrar, srv IngresoCaravanaServer) {
	// If the following call pancis, it indicates UnimplementedIngresoCaravanaServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IngresoCaravana_ServiceDesc, srv)
}

func _IngresoCaravana_GetIngresoCaravana_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IngresarACaravana)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IngresoCaravanaServer).GetIngresoCaravana(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IngresoCaravana_GetIngresoCaravana_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IngresoCaravanaServer).GetIngresoCaravana(ctx, req.(*IngresarACaravana))
	}
	return interceptor(ctx, in, info, handler)
}

// IngresoCaravana_ServiceDesc is the grpc.ServiceDesc for IngresoCaravana service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IngresoCaravana_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grupo11.IngresoCaravana",
	HandlerType: (*IngresoCaravanaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetIngresoCaravana",
			Handler:    _IngresoCaravana_GetIngresoCaravana_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}

const (
	PreguntarEstadoCaravanas_GetEstadoCaravanas_FullMethodName = "/grupo11.PreguntarEstadoCaravanas/GetEstadoCaravanas"
)

// PreguntarEstadoCaravanasClient is the client API for PreguntarEstadoCaravanas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PreguntarEstadoCaravanasClient interface {
	GetEstadoCaravanas(ctx context.Context, in *SolicitarEstadoCaravanas, opts ...grpc.CallOption) (*EstadoCaravanas, error)
}

type preguntarEstadoCaravanasClient struct {
	cc grpc.ClientConnInterface
}

func NewPreguntarEstadoCaravanasClient(cc grpc.ClientConnInterface) PreguntarEstadoCaravanasClient {
	return &preguntarEstadoCaravanasClient{cc}
}

func (c *preguntarEstadoCaravanasClient) GetEstadoCaravanas(ctx context.Context, in *SolicitarEstadoCaravanas, opts ...grpc.CallOption) (*EstadoCaravanas, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EstadoCaravanas)
	err := c.cc.Invoke(ctx, PreguntarEstadoCaravanas_GetEstadoCaravanas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PreguntarEstadoCaravanasServer is the server API for PreguntarEstadoCaravanas service.
// All implementations must embed UnimplementedPreguntarEstadoCaravanasServer
// for forward compatibility.
type PreguntarEstadoCaravanasServer interface {
	GetEstadoCaravanas(context.Context, *SolicitarEstadoCaravanas) (*EstadoCaravanas, error)
	mustEmbedUnimplementedPreguntarEstadoCaravanasServer()
}

// UnimplementedPreguntarEstadoCaravanasServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPreguntarEstadoCaravanasServer struct{}

func (UnimplementedPreguntarEstadoCaravanasServer) GetEstadoCaravanas(context.Context, *SolicitarEstadoCaravanas) (*EstadoCaravanas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstadoCaravanas not implemented")
}
func (UnimplementedPreguntarEstadoCaravanasServer) mustEmbedUnimplementedPreguntarEstadoCaravanasServer() {
}
func (UnimplementedPreguntarEstadoCaravanasServer) testEmbeddedByValue() {}

// UnsafePreguntarEstadoCaravanasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PreguntarEstadoCaravanasServer will
// result in compilation errors.
type UnsafePreguntarEstadoCaravanasServer interface {
	mustEmbedUnimplementedPreguntarEstadoCaravanasServer()
}

func RegisterPreguntarEstadoCaravanasServer(s grpc.ServiceRegistrar, srv PreguntarEstadoCaravanasServer) {
	// If the following call pancis, it indicates UnimplementedPreguntarEstadoCaravanasServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PreguntarEstadoCaravanas_ServiceDesc, srv)
}

func _PreguntarEstadoCaravanas_GetEstadoCaravanas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitarEstadoCaravanas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PreguntarEstadoCaravanasServer).GetEstadoCaravanas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PreguntarEstadoCaravanas_GetEstadoCaravanas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PreguntarEstadoCaravanasServer).GetEstadoCaravanas(ctx, req.(*SolicitarEstadoCaravanas))
	}
	return interceptor(ctx, in, info, handler)
}

// PreguntarEstadoCaravanas_ServiceDesc is the grpc.ServiceDesc for PreguntarEstadoCaravanas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PreguntarEstadoCaravanas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grupo11.PreguntarEstadoCaravanas",
	HandlerType: (*PreguntarEstadoCaravanasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEstadoCaravanas",
			Handler:    _PreguntarEstadoCaravanas_GetEstadoCaravanas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}

const (
	EstadoPaquetesCaravanas_GetEstadoPaquetesCaravanas_FullMethodName = "/grupo11.EstadoPaquetesCaravanas/GetEstadoPaquetesCaravanas"
)

// EstadoPaquetesCaravanasClient is the client API for EstadoPaquetesCaravanas service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EstadoPaquetesCaravanasClient interface {
	GetEstadoPaquetesCaravanas(ctx context.Context, in *RecibirEstadoPaquetesCaravanas, opts ...grpc.CallOption) (*ConfirmarRecibimientoEstado, error)
}

type estadoPaquetesCaravanasClient struct {
	cc grpc.ClientConnInterface
}

func NewEstadoPaquetesCaravanasClient(cc grpc.ClientConnInterface) EstadoPaquetesCaravanasClient {
	return &estadoPaquetesCaravanasClient{cc}
}

func (c *estadoPaquetesCaravanasClient) GetEstadoPaquetesCaravanas(ctx context.Context, in *RecibirEstadoPaquetesCaravanas, opts ...grpc.CallOption) (*ConfirmarRecibimientoEstado, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConfirmarRecibimientoEstado)
	err := c.cc.Invoke(ctx, EstadoPaquetesCaravanas_GetEstadoPaquetesCaravanas_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EstadoPaquetesCaravanasServer is the server API for EstadoPaquetesCaravanas service.
// All implementations must embed UnimplementedEstadoPaquetesCaravanasServer
// for forward compatibility.
type EstadoPaquetesCaravanasServer interface {
	GetEstadoPaquetesCaravanas(context.Context, *RecibirEstadoPaquetesCaravanas) (*ConfirmarRecibimientoEstado, error)
	mustEmbedUnimplementedEstadoPaquetesCaravanasServer()
}

// UnimplementedEstadoPaquetesCaravanasServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEstadoPaquetesCaravanasServer struct{}

func (UnimplementedEstadoPaquetesCaravanasServer) GetEstadoPaquetesCaravanas(context.Context, *RecibirEstadoPaquetesCaravanas) (*ConfirmarRecibimientoEstado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEstadoPaquetesCaravanas not implemented")
}
func (UnimplementedEstadoPaquetesCaravanasServer) mustEmbedUnimplementedEstadoPaquetesCaravanasServer() {
}
func (UnimplementedEstadoPaquetesCaravanasServer) testEmbeddedByValue() {}

// UnsafeEstadoPaquetesCaravanasServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EstadoPaquetesCaravanasServer will
// result in compilation errors.
type UnsafeEstadoPaquetesCaravanasServer interface {
	mustEmbedUnimplementedEstadoPaquetesCaravanasServer()
}

func RegisterEstadoPaquetesCaravanasServer(s grpc.ServiceRegistrar, srv EstadoPaquetesCaravanasServer) {
	// If the following call pancis, it indicates UnimplementedEstadoPaquetesCaravanasServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EstadoPaquetesCaravanas_ServiceDesc, srv)
}

func _EstadoPaquetesCaravanas_GetEstadoPaquetesCaravanas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecibirEstadoPaquetesCaravanas)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EstadoPaquetesCaravanasServer).GetEstadoPaquetesCaravanas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EstadoPaquetesCaravanas_GetEstadoPaquetesCaravanas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EstadoPaquetesCaravanasServer).GetEstadoPaquetesCaravanas(ctx, req.(*RecibirEstadoPaquetesCaravanas))
	}
	return interceptor(ctx, in, info, handler)
}

// EstadoPaquetesCaravanas_ServiceDesc is the grpc.ServiceDesc for EstadoPaquetesCaravanas service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EstadoPaquetesCaravanas_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grupo11.EstadoPaquetesCaravanas",
	HandlerType: (*EstadoPaquetesCaravanasServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEstadoPaquetesCaravanas",
			Handler:    _EstadoPaquetesCaravanas_GetEstadoPaquetesCaravanas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}

const (
	FinancieroService_GetTransactionStatus_FullMethodName = "/grupo11.FinancieroService/GetTransactionStatus"
)

// FinancieroServiceClient is the client API for FinancieroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancieroServiceClient interface {
	GetTransactionStatus(ctx context.Context, in *FinancieroRequest, opts ...grpc.CallOption) (*FinancieroResponse, error)
}

type financieroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancieroServiceClient(cc grpc.ClientConnInterface) FinancieroServiceClient {
	return &financieroServiceClient{cc}
}

func (c *financieroServiceClient) GetTransactionStatus(ctx context.Context, in *FinancieroRequest, opts ...grpc.CallOption) (*FinancieroResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FinancieroResponse)
	err := c.cc.Invoke(ctx, FinancieroService_GetTransactionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancieroServiceServer is the server API for FinancieroService service.
// All implementations must embed UnimplementedFinancieroServiceServer
// for forward compatibility.
type FinancieroServiceServer interface {
	GetTransactionStatus(context.Context, *FinancieroRequest) (*FinancieroResponse, error)
	mustEmbedUnimplementedFinancieroServiceServer()
}

// UnimplementedFinancieroServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFinancieroServiceServer struct{}

func (UnimplementedFinancieroServiceServer) GetTransactionStatus(context.Context, *FinancieroRequest) (*FinancieroResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionStatus not implemented")
}
func (UnimplementedFinancieroServiceServer) mustEmbedUnimplementedFinancieroServiceServer() {}
func (UnimplementedFinancieroServiceServer) testEmbeddedByValue()                           {}

// UnsafeFinancieroServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancieroServiceServer will
// result in compilation errors.
type UnsafeFinancieroServiceServer interface {
	mustEmbedUnimplementedFinancieroServiceServer()
}

func RegisterFinancieroServiceServer(s grpc.ServiceRegistrar, srv FinancieroServiceServer) {
	// If the following call pancis, it indicates UnimplementedFinancieroServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FinancieroService_ServiceDesc, srv)
}

func _FinancieroService_GetTransactionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinancieroRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancieroServiceServer).GetTransactionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancieroService_GetTransactionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancieroServiceServer).GetTransactionStatus(ctx, req.(*FinancieroRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancieroService_ServiceDesc is the grpc.ServiceDesc for FinancieroService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancieroService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grupo11.FinancieroService",
	HandlerType: (*FinancieroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionStatus",
			Handler:    _FinancieroService_GetTransactionStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "general.proto",
}
