package main

import (
	"bufio"
	"fmt"
	"log"
	"math/rand"
	"os"
	"strings"
	"time"

	"google.golang.org/grpc"
)

type Input struct {
	// TODO: Describir en el readme.txt que se tendrá en cuenta que solo ps puede tener decimales
	PS float64
	TE int
	TD int
	CD int
	VI int
}

// type server struct {
// 	proto.UnimplementedDigimonServiceServer
// }

func leerInput(archivo string) (Input, error) {
	var config Input
	file, err := os.Open(archivo)
	if err != nil {
		return config, err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	if scanner.Scan() {
		// Leer la línea y separar por comas
		valores := strings.Split(scanner.Text(), ",")
		if len(valores) != 5 {
			return config, fmt.Errorf("formato de input incorrecto")
		}

		fmt.Sscanf(valores[0], "%f", &config.PS)
		fmt.Sscanf(valores[1], "%f", &config.TE)
		fmt.Sscanf(valores[2], "%f", &config.TD)
		fmt.Sscanf(valores[3], "%d", &config.CD)
		fmt.Sscanf(valores[4], "%d", &config.VI)
	}

	if err := scanner.Err(); err != nil {
		return config, err
	}
	return config, nil
}

func leerDigimons(archivo string) ([]string, error) {
	var digimons []string
	file, err := os.Open(archivo)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		digimons = append(digimons, scanner.Text())
	}

	if err := scanner.Err(); err != nil {
		return nil, err
	}
	return digimons, nil
}

func seleccionarDigimonAleatorio(digimons []string, ps float64) string {
	// Seleccionar un Digimon al azar
	numero := rand.Intn(len(digimons))
	fmt.Printf("Número aleatorio generado: %d\n", numero)
	digimonAleatorio := digimons[numero]
	atributos := strings.Split(digimonAleatorio, ",")

	// Generar un número aleatorio entre 0 y 1
	salidaRandom := rand.Float64()
	var estado string

	// Determinar si será sacrificado
	if salidaRandom < ps {
		estado = "Sacrificado"
	} else {
		estado = "No-Sacrificado"
	}

	// Crear el string en el formato solicitado
	resultado := fmt.Sprintf("%s,%s,%s", atributos[0], atributos[1], estado)

	return resultado
}

func maiaaaaan() {
	rand.New(rand.NewSource(time.Now().UnixNano())) // Seed "aleatoria"

	// Leer archivo input.txt
	// Valores quedarán en las variables input.PS, input.TA, etc. EJ: fmt.Printf("Probabilidad de sacrificio: %f", input.PS)
	input, err := leerInput("input.txt")
	if err != nil {
		fmt.Println("Error al leer input:", err)
		return
	}

	// Leer archivo digimons.txt
	digimons, err := leerDigimons("DIGIMONS.TXT")
	if err != nil {
		fmt.Println("Error al leer archivo DIGIMONS.TXT:", err)
		return
	}

	// Seleccionar un Digimon al azar de prueba, e imprimir la estructura para enviar el mensaje.
	resultado := seleccionarDigimonAleatorio(digimons, input.PS)
	fmt.Println(resultado)
	// fmt.Printf("Probabilidad de sacrificio: %f", input.PS)

	// Al comenzar el programa, debe seleccionar 6 digimons al azar y enviarlos al primary server.

	// Configurar conexión al servidor
	primaryNodeHost := os.Getenv("PRIMARY_NODE_HOST")
	// fmt.Printf("%s\n", primaryNodeHost)
	conn, err := grpc.Dial("primarynode:8080", grpc.WithInsecure())
	// log.Fatalf("No se pudo conectar al servidor *%s*: %v, --- %v\n", primaryNodeHost, err, conn)
	if err != nil {
		log.Fatalf("No se pudo conectar al servidor *%s*: %v\n", primaryNodeHost, err)
	}
	defer conn.Close()
	fmt.Printf("me conectéxd\n")
	fmt.Printf("ip final %s\n", primaryNodeHost)
}
